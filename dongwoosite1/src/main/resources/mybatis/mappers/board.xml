<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">
	<!-- 글 삽입을 위한 sql bno는 시퀀스 사용 -->
	<insert id="register" parameterType="Board">
		insert into d_board(
		bno,category,image, title, content, ip, email, nickname)
		values(d_boardseq.nextval,#{category},#{image},#{title},#{content},#{ip},
		#{email},#{nickname})
	</insert>



	<!-- 상세보기를 할 때 글 번호에 해당하는 데이터의 조회수를 1증가시켜주는 sql -->
	<update id="updatecnt" parameterType="java.lang.Integer">
		update d_board
		set readcnt =
		readcnt + 1
		where bno = #{bno}
	</update>

	<!-- 상세보기를 하기 위해서 글 번호에 해당하는 데이터를 가져오는 sql -->
	<select id="detail" parameterType="java.lang.Integer"
		resultType="Board">
		select *
		from d_board
		where bno = #{bno}
	</select>
	<!-- 게시글 수정을 위한 SQL -->
	<update id="update" parameterType="Board">
		update d_board
		set
		title=#{title}, content=#{content} ,image=#{image}, regdate=sysdate,
		ip = #{ip}
		where bno=#{bno}
	</update>

	<!-- 2.board.xml 파일에 게시글을 삭제하는 SQL을 작성 -->
	<!-- 게시글 삭제를 위한 SQL -->
	<delete id="delete" parameterType="java.lang.Integer">
		delete from d_board
		where
		bno=#{bno}
	</delete>


	<!-- 3.board.xml 파일에 sql을 추가하고 수정 1)전체 데이터 개수를 가져오는 SQL을 추가 -->
	<!-- 전체 데이터 개수를 가져오는 SQL -->
	<select id="totalcount" resultType="java.lang.Integer"
		parameterType="SearchCriteria">

		select count(*)
		from d_board
		<include refid="search"></include>

	</select>
	<!-- 2)게시물 목록을 가져오는 SQL은 수정 - id가 list 인 SQL =>paramter를 이전에 만든 Criteria로 
		설정을 해서 시작하는 데이터번호와 끝나는 데이터 번호를 이용해서 원하는 개수만큼 데이터를 가져오도록 변경 -->
	<!-- 게시글 전체를 가져오는 SQL -->
	<select id="list" resultType="Board" parameterType="Criteria">
		select bno, title, nickname, regdate, readcnt, email,image,category,replycnt
		from (select rownum rnum, bno, title, nickname, regdate,
		readcnt, email ,image,category,replycnt
		from (select * from d_board
		<include refid="search"></include>
		order by regdate desc))
		where rnum &gt;= #{pageStart} and
		rnum &lt;= #{pageStart} + #{perPageNum} - 1
	</select>



	<!-- 공통으로 사용할 SQL 작성 -->
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">
				where title like '%' || #{keyword} || '%'
			</if>
			<if test="searchType == 'c'.toString()">
				where content like '%' || #{keyword} || '%'
			</if>
			<if test="searchType == 'tc'.toString()">
				where title like '%' || #{keyword} || '%' or
				content like
				'%' || #{keyword} || '%'
			</if>
		</if>
	</sql>
	
	<!-- springreply 테이블에서 게시글 번호에 해당하는 데이터의 개수를 구해주는 sql -->
	<select id="replycnt" parameterType="java.lang.Integer"
		resultType="java.lang.Integer">
		select count(*)
		from d_reply
		where bno = #{bno}

	</select>
	
	
</mapper>
